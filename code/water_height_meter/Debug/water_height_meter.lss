
water_height_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800200  000002a4  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001113  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d81  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000567  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00002a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061d  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cf  00000000  00000000  00003121  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ea       	ldi	r30, 0xA4	; 164
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	c7 c0       	rjmp	.+398    	; 0x2a0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
#include <util/delay.h>
#include "nokia_5110_lcd.h"

int main(void)
{
    LCD_init();       //LCD initialization
 114:	46 d0       	rcall	.+140    	; 0x1a2 <LCD_init>

    LCD_write_english_string(0, 0, "Hello World !");
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	52 e0       	ldi	r21, 0x02	; 2
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	b3 d0       	rcall	.+358    	; 0x286 <LCD_write_english_string>
    #ifdef ARDUINO_MEGA
    LCD_write_english_string(0, 1, "Communicating with AVR 2560 ");
 120:	4e e0       	ldi	r20, 0x0E	; 14
 122:	52 e0       	ldi	r21, 0x02	; 2
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	ae d0       	rcall	.+348    	; 0x286 <LCD_write_english_string>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x16>

0000012c <LCD_write_byte>:

void LCD_write_byte(unsigned char dat, unsigned char command)
{
    unsigned char i;

    if (command == 1)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	29 f4       	brne	.+10     	; 0x13a <LCD_write_byte+0xe>
    LCD_DC_clr;
 130:	9e b1       	in	r25, 0x0e	; 14
 132:	97 7f       	andi	r25, 0xF7	; 247
 134:	9e b9       	out	0x0e, r25	; 14
        LCD_write_byte(0, 0);
    }
}

void LCD_write_byte(unsigned char dat, unsigned char command)
{
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	1b c0       	rjmp	.+54     	; 0x170 <LCD_write_byte+0x44>
    unsigned char i;

    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;
 13a:	9e b1       	in	r25, 0x0e	; 14
 13c:	98 60       	ori	r25, 0x08	; 8
 13e:	9e b9       	out	0x0e, r25	; 14
 140:	fa cf       	rjmp	.-12     	; 0x136 <LCD_write_byte+0xa>

    for(i = 0; i < 8; i++)
    {
        if(dat&0x80)
 142:	88 23       	and	r24, r24
 144:	34 f4       	brge	.+12     	; 0x152 <LCD_write_byte+0x26>
            SDIN_set;
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	90 81       	ld	r25, Z
 14c:	98 60       	ori	r25, 0x08	; 8
 14e:	90 83       	st	Z, r25
 150:	05 c0       	rjmp	.+10     	; 0x15c <LCD_write_byte+0x30>
        else
            SDIN_clr;
 152:	e2 e0       	ldi	r30, 0x02	; 2
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	90 81       	ld	r25, Z
 158:	97 7f       	andi	r25, 0xF7	; 247
 15a:	90 83       	st	Z, r25
               
        SCLK_clr;
 15c:	e2 e0       	ldi	r30, 0x02	; 2
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	90 81       	ld	r25, Z
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	90 83       	st	Z, r25
        dat = dat << 1;
 166:	88 0f       	add	r24, r24
        SCLK_set;
 168:	90 81       	ld	r25, Z
 16a:	90 61       	ori	r25, 0x10	; 16
 16c:	90 83       	st	Z, r25
    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;

    for(i = 0; i < 8; i++)
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	28 30       	cpi	r18, 0x08	; 8
 172:	38 f3       	brcs	.-50     	; 0x142 <LCD_write_byte+0x16>
               
        SCLK_clr;
        dat = dat << 1;
        SCLK_set;
    }
}
 174:	08 95       	ret

00000176 <LCD_clear>:
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
    LCD_clear();             // clear the LCD
}

void LCD_clear()
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
    LCD_write_byte(0x0c, 1);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	d6 df       	rcall	.-84     	; 0x12c <LCD_write_byte>
    LCD_write_byte(0x80, 1);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	d3 df       	rcall	.-90     	; 0x12c <LCD_write_byte>

    for (unsigned int i = 0; i < 504; i++)
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
 18a:	04 c0       	rjmp	.+8      	; 0x194 <LCD_clear+0x1e>
    {
        LCD_write_byte(0, 0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	cd df       	rcall	.-102    	; 0x12c <LCD_write_byte>
void LCD_clear()
{
    LCD_write_byte(0x0c, 1);
    LCD_write_byte(0x80, 1);

    for (unsigned int i = 0; i < 504; i++)
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c8 3f       	cpi	r28, 0xF8	; 248
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	d8 07       	cpc	r29, r24
 19a:	c0 f3       	brcs	.-16     	; 0x18c <LCD_clear+0x16>
    {
        LCD_write_byte(0, 0);
    }
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <LCD_init>:
#include "english_font.h"

void LCD_init() 
{
    // Setup all pins to out
    LCD_RST_DDR |= (1 << LCD_RST_PIN);
 1a2:	8d b1       	in	r24, 0x0d	; 13
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	8d b9       	out	0x0d, r24	; 13
    LCD_CE_DDR  |= (1 << LCD_CE_PIN);
 1a8:	83 b3       	in	r24, 0x13	; 19
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	83 bb       	out	0x13, r24	; 19
    LCD_DC_DDR  |= (1 << LCD_DC_PIN);
 1ae:	8d b1       	in	r24, 0x0d	; 13
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	8d b9       	out	0x0d, r24	; 13
    SDIN_DDR    |= (1 << SDIN_PIN);
 1b4:	e1 e0       	ldi	r30, 0x01	; 1
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	80 81       	ld	r24, Z
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	80 83       	st	Z, r24
    SCLK_DDR    |= (1 << SCLK_PIN);
 1be:	80 81       	ld	r24, Z
 1c0:	80 61       	ori	r24, 0x10	; 16
 1c2:	80 83       	st	Z, r24
    
    // Set CE to low, this bus is reserved for display
    LCD_CE_PORT &= ~(1 << LCD_DC_PIN);
 1c4:	84 b3       	in	r24, 0x14	; 20
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	84 bb       	out	0x14, r24	; 20
    
    // Set other pins high
    LCD_RST_PORT    |= (1 << LCD_RST_PIN);
 1ca:	8e b1       	in	r24, 0x0e	; 14
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	8e b9       	out	0x0e, r24	; 14
    LCD_DC_PORT     |= (1 << LCD_DC_PIN);
 1d0:	8e b1       	in	r24, 0x0e	; 14
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	8e b9       	out	0x0e, r24	; 14
    SDIN_PORT       |= (1 << SDIN_PIN);
 1d6:	e2 e0       	ldi	r30, 0x02	; 2
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
    SCLK_PORT       |= (1 << SCLK_PIN);
 1e0:	80 81       	ld	r24, Z
 1e2:	80 61       	ori	r24, 0x10	; 16
 1e4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f e9       	ldi	r24, 0x9F	; 159
 1e8:	9f e0       	ldi	r25, 0x0F	; 15
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_init+0x48>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_init+0x4e>
 1f0:	00 00       	nop
    _delay_ms(1);
    
    // Reset and setup
    LCD_RST_clr;
 1f2:	8e b1       	in	r24, 0x0e	; 14
 1f4:	8f 7d       	andi	r24, 0xDF	; 223
 1f6:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	95 e0       	ldi	r25, 0x05	; 5
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_init+0x58>
 1fe:	00 00       	nop
    _delay_us(1);
    LCD_RST_set;
 200:	8e b1       	in	r24, 0x0e	; 14
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8e b9       	out	0x0e, r24	; 14
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_init+0x66>
 20c:	00 00       	nop

    _delay_us(1);

    LCD_write_byte(0x21, 1); // set LCD mode
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e2       	ldi	r24, 0x21	; 33
 212:	8c df       	rcall	.-232    	; 0x12c <LCD_write_byte>
    LCD_write_byte(0xc8, 1); // set bias voltage
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	89 df       	rcall	.-238    	; 0x12c <LCD_write_byte>
    LCD_write_byte(0x06, 1); // temperature correction
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	86 df       	rcall	.-244    	; 0x12c <LCD_write_byte>
    LCD_write_byte(0x13, 1); // 1:48
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	83 e1       	ldi	r24, 0x13	; 19
 224:	83 df       	rcall	.-250    	; 0x12c <LCD_write_byte>
    LCD_write_byte(0x20, 1); // use bias command, vertical
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	80 e2       	ldi	r24, 0x20	; 32
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
 22a:	80 df       	rcall	.-256    	; 0x12c <LCD_write_byte>
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	7d df       	rcall	.-262    	; 0x12c <LCD_write_byte>
    LCD_clear();             // clear the LCD
 232:	a1 cf       	rjmp	.-190    	; 0x176 <LCD_clear>
 234:	08 95       	ret

00000236 <LCD_set_XY>:
 236:	cf 93       	push	r28
        SCLK_set;
    }
}

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 238:	c8 2f       	mov	r28, r24
 23a:	86 2f       	mov	r24, r22
    LCD_write_byte(0x40 | Y, 1);    // column
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	75 df       	rcall	.-278    	; 0x12c <LCD_write_byte>
    LCD_write_byte(0x80 | X, 1);    // row
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8c 2f       	mov	r24, r28
 246:	80 68       	ori	r24, 0x80	; 128
 248:	71 df       	rcall	.-286    	; 0x12c <LCD_write_byte>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
    unsigned char line;
    c -= 32;
 252:	d0 ee       	ldi	r29, 0xE0	; 224
 254:	d8 0f       	add	r29, r24

    for (line = 0; line < 6; line++)
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	11 c0       	rjmp	.+34     	; 0x27c <LCD_write_char+0x2e>
        LCD_write_byte(font6x8[c][line], 0);
 25a:	8d 2f       	mov	r24, r29
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e8 0f       	add	r30, r24
 266:	f9 1f       	adc	r31, r25
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	e5 5d       	subi	r30, 0xD5	; 213
 26e:	fd 4f       	sbci	r31, 0xFD	; 253
 270:	ec 0f       	add	r30, r28
 272:	f1 1d       	adc	r31, r1
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	59 df       	rcall	.-334    	; 0x12c <LCD_write_byte>
void LCD_write_char(unsigned char c)
{
    unsigned char line;
    c -= 32;

    for (line = 0; line < 6; line++)
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	c6 30       	cpi	r28, 0x06	; 6
 27e:	68 f3       	brcs	.-38     	; 0x25a <LCD_write_char+0xc>
        LCD_write_byte(font6x8[c][line], 0);
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <LCD_write_english_string>:

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ea 01       	movw	r28, r20
    LCD_set_XY(X,Y);
 28c:	d4 df       	rcall	.-88     	; 0x236 <LCD_set_XY>
    while (*s)
    {
        LCD_write_char(*s);
 28e:	02 c0       	rjmp	.+4      	; 0x294 <LCD_write_english_string+0xe>
 290:	de df       	rcall	.-68     	; 0x24e <LCD_write_char>
        s++;
 292:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
    LCD_set_XY(X,Y);
    while (*s)
 294:	88 81       	ld	r24, Y
 296:	81 11       	cpse	r24, r1
 298:	fb cf       	rjmp	.-10     	; 0x290 <LCD_write_english_string+0xa>
    {
        LCD_write_char(*s);
        s++;
    }
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
