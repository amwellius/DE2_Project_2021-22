
water_height_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000044c  00800200  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000131e  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e0e  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c6  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000678  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000478  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	16 e0       	ldi	r17, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e1       	ldi	r30, 0x1C	; 28
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 34       	cpi	r26, 0x4C	; 76
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	03 c1       	rjmp	.+518    	; 0x318 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
#include <util/delay.h>
#include "nokia_5110_lcd.h"

int main(void)
{
    LCD_init();       //LCD initialization
 114:	51 d0       	rcall	.+162    	; 0x1b8 <LCD_init>
    
    // show init screen, sleep 5s
    LCD_write_init();  
 116:	ee d0       	rcall	.+476    	; 0x2f4 <LCD_write_init>
 118:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	83 e2       	ldi	r24, 0x23	; 35
 11c:	94 ef       	ldi	r25, 0xF4	; 244
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x14>
 128:	00 00       	nop
    _delay_ms(5000);
    LCD_clear();
 12a:	30 d0       	rcall	.+96     	; 0x18c <LCD_clear>
 12c:	40 e0       	ldi	r20, 0x00	; 0
    
    LCD_write_english_string(0, 0, "Hello World !");
 12e:	52 e0       	ldi	r21, 0x02	; 2
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	b3 d0       	rcall	.+358    	; 0x29c <LCD_write_english_string>
 136:	4e e0       	ldi	r20, 0x0E	; 14
    #ifdef ARDUINO_MEGA
    LCD_write_english_string(0, 1, "Communicating with AVR 2560 ");
 138:	52 e0       	ldi	r21, 0x02	; 2
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	ae d0       	rcall	.+348    	; 0x29c <LCD_write_english_string>
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x2c>

00000142 <LCD_write_byte>:
 142:	61 30       	cpi	r22, 0x01	; 1

void LCD_write_byte(unsigned char dat, unsigned char command)
{
    unsigned char i;

    if (command == 1)
 144:	29 f4       	brne	.+10     	; 0x150 <LCD_write_byte+0xe>
    LCD_DC_clr;
 146:	9e b1       	in	r25, 0x0e	; 14
 148:	97 7f       	andi	r25, 0xF7	; 247
 14a:	9e b9       	out	0x0e, r25	; 14
        LCD_write_byte(0, 0);
    }
}

void LCD_write_byte(unsigned char dat, unsigned char command)
{
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	1b c0       	rjmp	.+54     	; 0x186 <LCD_write_byte+0x44>
    unsigned char i;

    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;
 150:	9e b1       	in	r25, 0x0e	; 14
 152:	98 60       	ori	r25, 0x08	; 8
 154:	9e b9       	out	0x0e, r25	; 14
 156:	fa cf       	rjmp	.-12     	; 0x14c <LCD_write_byte+0xa>

    for(i = 0; i < 8; i++)
    {
        if(dat&0x80)
 158:	88 23       	and	r24, r24
 15a:	34 f4       	brge	.+12     	; 0x168 <LCD_write_byte+0x26>
            SDIN_set;
 15c:	e2 e0       	ldi	r30, 0x02	; 2
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	90 81       	ld	r25, Z
 162:	98 60       	ori	r25, 0x08	; 8
 164:	90 83       	st	Z, r25
 166:	05 c0       	rjmp	.+10     	; 0x172 <LCD_write_byte+0x30>
        else
            SDIN_clr;
 168:	e2 e0       	ldi	r30, 0x02	; 2
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	90 81       	ld	r25, Z
 16e:	97 7f       	andi	r25, 0xF7	; 247
 170:	90 83       	st	Z, r25
               
        SCLK_clr;
 172:	e2 e0       	ldi	r30, 0x02	; 2
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	90 81       	ld	r25, Z
 178:	9f 7e       	andi	r25, 0xEF	; 239
 17a:	90 83       	st	Z, r25
        dat = dat << 1;
 17c:	88 0f       	add	r24, r24
        SCLK_set;
 17e:	90 81       	ld	r25, Z
 180:	90 61       	ori	r25, 0x10	; 16
 182:	90 83       	st	Z, r25
    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;

    for(i = 0; i < 8; i++)
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	28 30       	cpi	r18, 0x08	; 8
 188:	38 f3       	brcs	.-50     	; 0x158 <LCD_write_byte+0x16>
               
        SCLK_clr;
        dat = dat << 1;
        SCLK_set;
    }
}
 18a:	08 95       	ret

0000018c <LCD_clear>:
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
    LCD_clear();             // clear the LCD
}

void LCD_clear()
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
    LCD_write_byte(0x0c, 1);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	d6 df       	rcall	.-84     	; 0x142 <LCD_write_byte>
    LCD_write_byte(0x80, 1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	d3 df       	rcall	.-90     	; 0x142 <LCD_write_byte>

    for (unsigned int i = 0; i < NUM_OF_CELLS; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <LCD_clear+0x1e>
    {
        LCD_write_byte(0, 0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	cd df       	rcall	.-102    	; 0x142 <LCD_write_byte>
void LCD_clear()
{
    LCD_write_byte(0x0c, 1);
    LCD_write_byte(0x80, 1);

    for (unsigned int i = 0; i < NUM_OF_CELLS; i++)
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	c8 3f       	cpi	r28, 0xF8	; 248
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	d8 07       	cpc	r29, r24
 1b0:	c0 f3       	brcs	.-16     	; 0x1a2 <LCD_clear+0x16>
    {
        LCD_write_byte(0, 0);
    }
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCD_init>:
#include "water_symbols.h"

void LCD_init() 
{
    // Setup all pins to out
    LCD_RST_DDR |= (1 << LCD_RST_PIN);
 1b8:	8d b1       	in	r24, 0x0d	; 13
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	8d b9       	out	0x0d, r24	; 13
    LCD_CE_DDR  |= (1 << LCD_CE_PIN);
 1be:	83 b3       	in	r24, 0x13	; 19
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	83 bb       	out	0x13, r24	; 19
    LCD_DC_DDR  |= (1 << LCD_DC_PIN);
 1c4:	8d b1       	in	r24, 0x0d	; 13
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	8d b9       	out	0x0d, r24	; 13
    SDIN_DDR    |= (1 << SDIN_PIN);
 1ca:	e1 e0       	ldi	r30, 0x01	; 1
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 81       	ld	r24, Z
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	80 83       	st	Z, r24
    SCLK_DDR    |= (1 << SCLK_PIN);
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
    
    // Set CE to low, this bus is reserved for display
    LCD_CE_PORT &= ~(1 << LCD_DC_PIN);
 1da:	84 b3       	in	r24, 0x14	; 20
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	84 bb       	out	0x14, r24	; 20
    
    // Set other pins high
    LCD_RST_PORT    |= (1 << LCD_RST_PIN);
 1e0:	8e b1       	in	r24, 0x0e	; 14
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	8e b9       	out	0x0e, r24	; 14
    LCD_DC_PORT     |= (1 << LCD_DC_PIN);
 1e6:	8e b1       	in	r24, 0x0e	; 14
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	8e b9       	out	0x0e, r24	; 14
    SDIN_PORT       |= (1 << SDIN_PIN);
 1ec:	e2 e0       	ldi	r30, 0x02	; 2
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	80 81       	ld	r24, Z
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	80 83       	st	Z, r24
    SCLK_PORT       |= (1 << SCLK_PIN);
 1f6:	80 81       	ld	r24, Z
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	80 83       	st	Z, r24
 1fc:	8f e9       	ldi	r24, 0x9F	; 159
 1fe:	9f e0       	ldi	r25, 0x0F	; 15
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_init+0x48>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_init+0x4e>
 206:	00 00       	nop
    _delay_ms(1);
    
    // Reset and setup
    LCD_RST_clr;
 208:	8e b1       	in	r24, 0x0e	; 14
 20a:	8f 7d       	andi	r24, 0xDF	; 223
 20c:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	95 e0       	ldi	r25, 0x05	; 5
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_init+0x58>
 214:	00 00       	nop
    _delay_us(1);
    LCD_RST_set;
 216:	8e b1       	in	r24, 0x0e	; 14
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	8e b9       	out	0x0e, r24	; 14
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_init+0x66>
 222:	00 00       	nop

    _delay_us(1);

    LCD_write_byte(0x21, 1); // set LCD mode
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e2       	ldi	r24, 0x21	; 33
 228:	8c df       	rcall	.-232    	; 0x142 <LCD_write_byte>
    LCD_write_byte(0xc8, 1); // set bias voltage
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	88 ec       	ldi	r24, 0xC8	; 200
 22e:	89 df       	rcall	.-238    	; 0x142 <LCD_write_byte>
    LCD_write_byte(0x06, 1); // temperature correction
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	86 df       	rcall	.-244    	; 0x142 <LCD_write_byte>
    LCD_write_byte(0x13, 1); // 1:48
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	83 e1       	ldi	r24, 0x13	; 19
 23a:	83 df       	rcall	.-250    	; 0x142 <LCD_write_byte>
    LCD_write_byte(0x20, 1); // use bias command, vertical
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	80 e2       	ldi	r24, 0x20	; 32
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
 240:	80 df       	rcall	.-256    	; 0x142 <LCD_write_byte>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	7d df       	rcall	.-262    	; 0x142 <LCD_write_byte>
    LCD_clear();             // clear the LCD
 248:	a1 cf       	rjmp	.-190    	; 0x18c <LCD_clear>
 24a:	08 95       	ret

0000024c <LCD_set_XY>:
 24c:	cf 93       	push	r28
        SCLK_set;
    }
}

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 24e:	c8 2f       	mov	r28, r24
 250:	86 2f       	mov	r24, r22
    LCD_write_byte(0x40 | Y, 1);    // column
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	80 64       	ori	r24, 0x40	; 64
 256:	75 df       	rcall	.-278    	; 0x142 <LCD_write_byte>
    LCD_write_byte(0x80 | X, 1);    // row
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8c 2f       	mov	r24, r28
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	71 df       	rcall	.-286    	; 0x142 <LCD_write_byte>
}
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
    unsigned char line;
    c -= 32;
 268:	d0 ee       	ldi	r29, 0xE0	; 224
 26a:	d8 0f       	add	r29, r24

    for (line = 0; line < 6; line++)
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	11 c0       	rjmp	.+34     	; 0x292 <LCD_write_char+0x2e>
        LCD_write_byte(font6x8[c][line], 0);
 270:	8d 2f       	mov	r24, r29
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e8 0f       	add	r30, r24
 27c:	f9 1f       	adc	r31, r25
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	ed 5d       	subi	r30, 0xDD	; 221
 284:	fb 4f       	sbci	r31, 0xFB	; 251
 286:	ec 0f       	add	r30, r28
 288:	f1 1d       	adc	r31, r1
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	59 df       	rcall	.-334    	; 0x142 <LCD_write_byte>
void LCD_write_char(unsigned char c)
{
    unsigned char line;
    c -= 32;

    for (line = 0; line < 6; line++)
 290:	cf 5f       	subi	r28, 0xFF	; 255
 292:	c6 30       	cpi	r28, 0x06	; 6
 294:	68 f3       	brcs	.-38     	; 0x270 <LCD_write_char+0xc>
        LCD_write_byte(font6x8[c][line], 0);
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <LCD_write_english_string>:

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ea 01       	movw	r28, r20
    LCD_set_XY(X,Y);
 2a2:	d4 df       	rcall	.-88     	; 0x24c <LCD_set_XY>
    while (*s)
    {
        LCD_write_char(*s);
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <LCD_write_english_string+0xe>
 2a6:	de df       	rcall	.-68     	; 0x264 <LCD_write_char>
        s++;
 2a8:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
    LCD_set_XY(X,Y);
    while (*s)
 2aa:	88 81       	ld	r24, Y
 2ac:	81 11       	cpse	r24, r1
 2ae:	fb cf       	rjmp	.-10     	; 0x2a6 <LCD_write_english_string+0xa>
    {
        LCD_write_char(*s);
        s++;
    }
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_write_whole_screen>:

void LCD_write_whole_screen(unsigned char *cells, uint16_t cells_n, uint16_t start_y) {
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	7c 01       	movw	r14, r24
 2c4:	8b 01       	movw	r16, r22
    LCD_set_XY(0, (unsigned char) start_y);
 2c6:	64 2f       	mov	r22, r20
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	c0 df       	rcall	.-128    	; 0x24c <LCD_set_XY>
    for (uint16_t i = 0; i < cells_n; i++)
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <LCD_write_whole_screen+0x2a>
        LCD_write_byte(cells[i], 0);
 2d2:	f7 01       	movw	r30, r14
 2d4:	ec 0f       	add	r30, r28
 2d6:	fd 1f       	adc	r31, r29
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	32 df       	rcall	.-412    	; 0x142 <LCD_write_byte>
    }
}

void LCD_write_whole_screen(unsigned char *cells, uint16_t cells_n, uint16_t start_y) {
    LCD_set_XY(0, (unsigned char) start_y);
    for (uint16_t i = 0; i < cells_n; i++)
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	c0 17       	cp	r28, r16
 2e2:	d1 07       	cpc	r29, r17
 2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <LCD_write_whole_screen+0x1c>
        LCD_write_byte(cells[i], 0);
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <LCD_write_init>:

void LCD_write_init()
{
    LCD_clear();
 2f4:	4b df       	rcall	.-362    	; 0x18c <LCD_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	83 ed       	ldi	r24, 0xD3	; 211
 2fa:	90 e3       	ldi	r25, 0x30	; 48
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <LCD_write_init+0x8>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_write_init+0x12>
 306:	00 00       	nop
    _delay_ms(1000);
    LCD_write_whole_screen((unsigned char*) init_msg_2, NUM_OF_CELLS, 0);    
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	68 ef       	ldi	r22, 0xF8	; 248
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	8b e2       	ldi	r24, 0x2B	; 43
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	d0 cf       	rjmp	.-96     	; 0x2b6 <LCD_write_whole_screen>
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
