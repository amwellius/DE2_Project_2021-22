
water_height_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a0  00800100  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f14  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000926  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000679  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004df  00000000  00000000  00002d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	02 d0       	rcall	.+4      	; 0xa0 <main>
  9c:	12 c1       	rjmp	.+548    	; 0x2c2 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <main>:

#include "main.h"

int main(void)
{
    LCD_init();       //LCD initialization
  a0:	64 d0       	rcall	.+200    	; 0x16a <LCD_init>
    
    // show init screen, sleep 5s
    LCD_write_init();  
  a2:	fd d0       	rcall	.+506    	; 0x29e <LCD_write_init>
  a4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	87 ea       	ldi	r24, 0xA7	; 167
  a8:	91 e6       	ldi	r25, 0x61	; 97
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x14>
  b4:	00 00       	nop
    _delay_ms(2000);
    LCD_clear();
  b6:	43 d0       	rcall	.+134    	; 0x13e <LCD_clear>
  b8:	40 e0       	ldi	r20, 0x00	; 0
    
    LCD_write_english_string(0, 0, "Hello World !");
  ba:	51 e0       	ldi	r21, 0x01	; 1
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	c2 d0       	rcall	.+388    	; 0x246 <LCD_write_english_string>
  c2:	4e e0       	ldi	r20, 0x0E	; 14
    #ifdef ARDUINO_MEGA
    LCD_write_english_string(0, 1, "Communicating with AVR 2560 ");
    #else
    LCD_write_english_string(0, 1, "Communicating with AVR 328p ");
  c4:	51 e0       	ldi	r21, 0x01	; 1
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	bd d0       	rcall	.+378    	; 0x246 <LCD_write_english_string>
    #endif
    
    /* Replace with your application code */
    uint8_t i = 0;
  cc:	c0 e0       	ldi	r28, 0x00	; 0
    
    while (1) 
    {
        LCD_clear();
  ce:	37 d0       	rcall	.+110    	; 0x13e <LCD_clear>
  d0:	4d ec       	ldi	r20, 0xCD	; 205
        LCD_write_whole_screen(water_level_img, 84, i/10);
  d2:	c4 9f       	mul	r28, r20
  d4:	41 2d       	mov	r20, r1
  d6:	11 24       	eor	r1, r1
  d8:	46 95       	lsr	r20
  da:	46 95       	lsr	r20
  dc:	46 95       	lsr	r20
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	64 e5       	ldi	r22, 0x54	; 84
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	83 e5       	ldi	r24, 0x53	; 83
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	bb d0       	rcall	.+374    	; 0x260 <LCD_write_whole_screen>
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	81 ee       	ldi	r24, 0xE1	; 225
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x50>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x5a>
  fa:	00 00       	nop
  fc:	cf 5f       	subi	r28, 0xFF	; 255
        //itoa(i, transmit_char, 10);
        //LCD_write_english_string(0, 0, transmit_char);
        _delay_ms(100);
        i++;
  fe:	e7 cf       	rjmp	.-50     	; 0xce <main+0x2e>

00000100 <LCD_write_byte>:

void LCD_write_byte(unsigned char dat, unsigned char command)
{
    unsigned char i;

    if (command == 1)
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	29 f4       	brne	.+10     	; 0x10e <LCD_write_byte+0xe>
    LCD_DC_clr;
 104:	95 b1       	in	r25, 0x05	; 5
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	95 b9       	out	0x05, r25	; 5
        LCD_write_byte(0, 0);
    }
}

void LCD_write_byte(unsigned char dat, unsigned char command)
{
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	15 c0       	rjmp	.+42     	; 0x138 <LCD_write_byte+0x38>
    unsigned char i;

    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	92 60       	ori	r25, 0x02	; 2
 112:	95 b9       	out	0x05, r25	; 5
 114:	fa cf       	rjmp	.-12     	; 0x10a <LCD_write_byte+0xa>

    for(i = 0; i < 8; i++)
    {
        if(dat&0x80)
 116:	88 23       	and	r24, r24
 118:	24 f4       	brge	.+8      	; 0x122 <LCD_write_byte+0x22>
            SDIN_set;
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	91 60       	ori	r25, 0x01	; 1
 11e:	95 b9       	out	0x05, r25	; 5
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_byte+0x28>
        else
            SDIN_clr;
 122:	95 b1       	in	r25, 0x05	; 5
 124:	9e 7f       	andi	r25, 0xFE	; 254
 126:	95 b9       	out	0x05, r25	; 5
               
        SCLK_clr;
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	9f 77       	andi	r25, 0x7F	; 127
 12c:	9b b9       	out	0x0b, r25	; 11
        dat = dat << 1;
 12e:	88 0f       	add	r24, r24
        SCLK_set;
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	90 68       	ori	r25, 0x80	; 128
 134:	9b b9       	out	0x0b, r25	; 11
    if (command == 1)
    LCD_DC_clr;
    else
    LCD_DC_set;

    for(i = 0; i < 8; i++)
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	28 30       	cpi	r18, 0x08	; 8
 13a:	68 f3       	brcs	.-38     	; 0x116 <LCD_write_byte+0x16>
               
        SCLK_clr;
        dat = dat << 1;
        SCLK_set;
    }
}
 13c:	08 95       	ret

0000013e <LCD_clear>:
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
    LCD_clear();             // clear the LCD
}

void LCD_clear()
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
    LCD_write_byte(0x0c, 1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	dc df       	rcall	.-72     	; 0x100 <LCD_write_byte>
    LCD_write_byte(0x80, 1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	d9 df       	rcall	.-78     	; 0x100 <LCD_write_byte>

    for (unsigned int i = 0; i < NUM_OF_CELLS; i++)
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	04 c0       	rjmp	.+8      	; 0x15c <LCD_clear+0x1e>
    {
        LCD_write_byte(0, 0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	d3 df       	rcall	.-90     	; 0x100 <LCD_write_byte>
void LCD_clear()
{
    LCD_write_byte(0x0c, 1);
    LCD_write_byte(0x80, 1);

    for (unsigned int i = 0; i < NUM_OF_CELLS; i++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	c8 3f       	cpi	r28, 0xF8	; 248
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	d8 07       	cpc	r29, r24
 162:	c0 f3       	brcs	.-16     	; 0x154 <LCD_clear+0x16>
    {
        LCD_write_byte(0, 0);
    }
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <LCD_init>:
#include "english_font.h"

void LCD_init() 
{
    // Setup all pins to out
    LCD_RST_DDR |= (1 << LCD_RST_PIN);
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	84 b9       	out	0x04, r24	; 4
    LCD_CE_DDR  |= (1 << LCD_CE_PIN);
 170:	84 b1       	in	r24, 0x04	; 4
 172:	84 60       	ori	r24, 0x04	; 4
 174:	84 b9       	out	0x04, r24	; 4
    LCD_DC_DDR  |= (1 << LCD_DC_PIN);
 176:	84 b1       	in	r24, 0x04	; 4
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	84 b9       	out	0x04, r24	; 4
    SDIN_DDR    |= (1 << SDIN_PIN);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	84 b9       	out	0x04, r24	; 4
    SCLK_DDR    |= (1 << SCLK_PIN);
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	80 68       	ori	r24, 0x80	; 128
 186:	8a b9       	out	0x0a, r24	; 10
    
    // Set CE to low, this bus is reserved for display
    LCD_CE_PORT &= ~(1 << LCD_DC_PIN);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	85 b9       	out	0x05, r24	; 5
    
    // Set other pins high
    LCD_RST_PORT    |= (1 << LCD_RST_PIN);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	88 60       	ori	r24, 0x08	; 8
 192:	85 b9       	out	0x05, r24	; 5
    LCD_DC_PORT     |= (1 << LCD_DC_PIN);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	82 60       	ori	r24, 0x02	; 2
 198:	85 b9       	out	0x05, r24	; 5
    SDIN_PORT       |= (1 << SDIN_PIN);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	85 b9       	out	0x05, r24	; 5
    SCLK_PORT       |= (1 << SCLK_PIN);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_init+0x40>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_init+0x46>
 1b0:	00 00       	nop
    _delay_ms(1);
    
    // Reset and setup
    LCD_RST_clr;
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	95 e0       	ldi	r25, 0x05	; 5
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_init+0x50>
 1be:	00 00       	nop
    _delay_us(1);
    LCD_RST_set;
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_init+0x5e>
 1cc:	00 00       	nop

    _delay_us(1);

    LCD_write_byte(0x21, 1); // set LCD mode
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	81 e2       	ldi	r24, 0x21	; 33
 1d2:	96 df       	rcall	.-212    	; 0x100 <LCD_write_byte>
    LCD_write_byte(0xc8, 1); // set bias voltage
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	88 ec       	ldi	r24, 0xC8	; 200
 1d8:	93 df       	rcall	.-218    	; 0x100 <LCD_write_byte>
    LCD_write_byte(0x06, 1); // temperature correction
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	90 df       	rcall	.-224    	; 0x100 <LCD_write_byte>
    LCD_write_byte(0x13, 1); // 1:48
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	83 e1       	ldi	r24, 0x13	; 19
 1e4:	8d df       	rcall	.-230    	; 0x100 <LCD_write_byte>
    LCD_write_byte(0x20, 1); // use bias command, vertical
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 e2       	ldi	r24, 0x20	; 32
    LCD_write_byte(0x0c, 1); // set LCD mode,display normally
 1ea:	8a df       	rcall	.-236    	; 0x100 <LCD_write_byte>
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	87 df       	rcall	.-242    	; 0x100 <LCD_write_byte>
    LCD_clear();             // clear the LCD
 1f2:	a5 cf       	rjmp	.-182    	; 0x13e <LCD_clear>
 1f4:	08 95       	ret

000001f6 <LCD_set_XY>:
 1f6:	cf 93       	push	r28
        SCLK_set;
    }
}

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 1f8:	c8 2f       	mov	r28, r24
 1fa:	86 2f       	mov	r24, r22
    LCD_write_byte(0x40 | Y, 1);    // column
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	7f df       	rcall	.-258    	; 0x100 <LCD_write_byte>
    LCD_write_byte(0x80 | X, 1);    // row
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	8c 2f       	mov	r24, r28
 206:	80 68       	ori	r24, 0x80	; 128
 208:	7b df       	rcall	.-266    	; 0x100 <LCD_write_byte>
}
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
    unsigned char line;
    c -= 32;
 212:	d0 ee       	ldi	r29, 0xE0	; 224
 214:	d8 0f       	add	r29, r24

    for (line = 0; line < 6; line++)
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	11 c0       	rjmp	.+34     	; 0x23c <LCD_write_char+0x2e>
        LCD_write_byte(font6x8[c][line], 0);
 21a:	8d 2f       	mov	r24, r29
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e8 0f       	add	r30, r24
 226:	f9 1f       	adc	r31, r25
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e5 5d       	subi	r30, 0xD5	; 213
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	ec 0f       	add	r30, r28
 232:	f1 1d       	adc	r31, r1
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	63 df       	rcall	.-314    	; 0x100 <LCD_write_byte>
void LCD_write_char(unsigned char c)
{
    unsigned char line;
    c -= 32;

    for (line = 0; line < 6; line++)
 23a:	cf 5f       	subi	r28, 0xFF	; 255
 23c:	c6 30       	cpi	r28, 0x06	; 6
 23e:	68 f3       	brcs	.-38     	; 0x21a <LCD_write_char+0xc>
        LCD_write_byte(font6x8[c][line], 0);
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_write_english_string>:

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ea 01       	movw	r28, r20
    LCD_set_XY(X,Y);
 24c:	d4 df       	rcall	.-88     	; 0x1f6 <LCD_set_XY>
    while (*s)
    {
        LCD_write_char(*s);
 24e:	02 c0       	rjmp	.+4      	; 0x254 <LCD_write_english_string+0xe>
 250:	de df       	rcall	.-68     	; 0x20e <LCD_write_char>
        s++;
 252:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)
{
    LCD_set_XY(X,Y);
    while (*s)
 254:	88 81       	ld	r24, Y
 256:	81 11       	cpse	r24, r1
 258:	fb cf       	rjmp	.-10     	; 0x250 <LCD_write_english_string+0xa>
    {
        LCD_write_char(*s);
        s++;
    }
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_write_whole_screen>:

void LCD_write_whole_screen(unsigned char *cells, uint16_t cells_n, uint16_t start_y) {
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	7c 01       	movw	r14, r24
 26e:	8b 01       	movw	r16, r22
    LCD_set_XY(0, (unsigned char) start_y);
 270:	64 2f       	mov	r22, r20
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	c0 df       	rcall	.-128    	; 0x1f6 <LCD_set_XY>
    for (uint16_t i = 0; i < cells_n; i++)
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	07 c0       	rjmp	.+14     	; 0x28a <LCD_write_whole_screen+0x2a>
        LCD_write_byte(cells[i], 0);
 27c:	f7 01       	movw	r30, r14
 27e:	ec 0f       	add	r30, r28
 280:	fd 1f       	adc	r31, r29
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	3c df       	rcall	.-392    	; 0x100 <LCD_write_byte>
    }
}

void LCD_write_whole_screen(unsigned char *cells, uint16_t cells_n, uint16_t start_y) {
    LCD_set_XY(0, (unsigned char) start_y);
    for (uint16_t i = 0; i < cells_n; i++)
 288:	21 96       	adiw	r28, 0x01	; 1
 28a:	c0 17       	cp	r28, r16
 28c:	d1 07       	cpc	r29, r17
 28e:	b0 f3       	brcs	.-20     	; 0x27c <LCD_write_whole_screen+0x1c>
        LCD_write_byte(cells[i], 0);
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	08 95       	ret

0000029e <LCD_write_init>:

void LCD_write_init()
{
    LCD_clear();
 29e:	4f df       	rcall	.-354    	; 0x13e <LCD_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	83 ed       	ldi	r24, 0xD3	; 211
 2a4:	90 e3       	ldi	r25, 0x30	; 48
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <LCD_write_init+0x8>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_write_init+0x12>
 2b0:	00 00       	nop
    _delay_ms(1000);
    LCD_write_whole_screen((unsigned char*) init_msg_2, NUM_OF_CELLS, 0);    
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	68 ef       	ldi	r22, 0xF8	; 248
 2b8:	71 e0       	ldi	r23, 0x01	; 1
 2ba:	87 ea       	ldi	r24, 0xA7	; 167
 2bc:	93 e0       	ldi	r25, 0x03	; 3
 2be:	d0 cf       	rjmp	.-96     	; 0x260 <LCD_write_whole_screen>
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
